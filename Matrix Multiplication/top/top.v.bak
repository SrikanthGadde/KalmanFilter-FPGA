module mult (output[31:0] c1, output[31:0] c2, output[31:0] c3, output[31:0] c4, 
    input [31:0] q, input [31:0] w, input [31:0] e, input [31:0] r, 
    input [31:0] u, input [31:0] i, input [31:0] o, input [31:0] p);
    assign c1 = q*u;
    assign c2 = w*i;
    assign c3 = e*o;
    assign c4 = r*p;
endmodule

module add (output [31:0] c, input [31:0] c1, input [31:0] c2, input [31:0] c3, input [31:0] c4);
    assign c = c1+c2+c3+c4;
endmodule

module mult_reg (output [31:0] out,
	input reset, input clock,
	input [31:0] a1, input [31:0] a2, input [31:0] a3, input [31:0] a4,
	input [31:0] b1, input [31:0] b2, input [31:0] b3, input [31:0] b4);
	
	reg [31:0] q,w,e,r,u,i,o,p;
	
	wire [31:0] c1,c2,c3,c4;
	reg [31:0] in1,in2,in3,in4;
	
    mult u2(c1,c2,c3,c4,q,w,e,r,u,i,o,p);
    add u3(out,in1,in2,in3,in4);
	
	always@(posedge clock)
	begin
        q<=a1;
        w<=a2;
        e<=a3;
        r<=a4;
        
        u<=b1;
        i<=b2;
        o<=b3;
        p<=b4;
		  
		  in1<=c1;
		  in2<=c2;
		  in3<=c3;
		  in4<=c4;
	end
endmodule

module top (a, b, reset, clock);
	
	input reset, clock;
	output wire [31:0] a, b;
	/*
	reg [31:0] a11 = 1;
	reg [31:0] a12 = 2;
	reg [31:0] a13 = 3;
	reg [31:0] a14 = 4;
	reg [31:0] a21 = 5;
	reg [31:0] a22 = 6;
	reg [31:0] a23 = 7;
	reg [31:0] a24 = 8;
	reg [31:0] a31 = 9;
	reg [31:0] a32 = 10;
	reg [31:0] a33 = 11;
	reg [31:0] a34 = 12;
	reg [31:0] a41 = 13;
	reg [31:0] a42 = 14;
	reg [31:0] a43 = 15;
	reg [31:0] a44 = 16;
	
	reg [31:0] b11 = 1;
	reg [31:0] b12 = 0;
	reg [31:0] b13 = 0;
	reg [31:0] b14 = 0;
	reg [31:0] b21 = 0;
	reg [31:0] b22 = 1;
	reg [31:0] b23 = 0;
	reg [31:0] b24 = 0;
	reg [31:0] b31 = 0;
	reg [31:0] b32 = 0;
	reg [31:0] b33 = 1;
	reg [31:0] b34 = 0;
	reg [31:0] b41 = 0;
	reg [31:0] b42 = 0;
	reg [31:0] b43 = 0;
	reg [31:0] b44 = 1;
	*/
    
    //reg [31:0] q, w, e, r, u, i, o, p;
    //wire [31:0] c;
    
    //mult_reg u1(c, reset, clock, q, w, e, r, u, i, o, p);
    
        //TODO declare and cleanup variables

    reg [5:0] address_a, address_b;
    reg [31:0] data_a, data_b;
    reg wren_a, wren_b;
    
    wire [31:0] q_a, q_b;
    
    assign a=q_a;
    assign b=q_b;
    
    ram uut(address_a, address_b, clock, data_a, data_b, wren_a, wren_b, q_a, q_b);
    
    
    integer S,NS;
    
	always@(posedge clock)
	begin
	if(reset) begin
		S<=0;
	end
	else begin
		S<=NS;
	end
	end
	
	always@(S)
	begin
	case(S)
	0:  begin           //A11,A12 address
        address_a = 6'b000000;
        address_b = 6'b000001;
        data_a = 32;
        data_b = 32;
        wren_a = 1'b0;
        wren_b = 1'b0;
		
		NS = 1;
		end
	1:	begin           //A13, A14 address        
        address_a = 6'b000010;
        address_b = 6'b000011;
        wren_a = 1'b0;
        wren_b = 1'b0;
        data_a = 32;
        data_b = 32;
        
        NS=2;
        end
	2:	begin           //B11, B21 address
        address_a = 6'b010000;
        address_b = 6'b010100;
        wren_a = 1'b0;
        wren_b = 1'b0;
        data_a = 32;
        data_b = 32;
        
        NS=3;
        end
	3:	begin           //B31, B41 address
        address_a = 6'b011000;
        address_b = 6'b011100;
        wren_a = 1'b0;
        wren_b = 1'b0;
        data_a = 32;
        data_b = 32;
        
        NS=4;
        end
	4:	begin           //B12, B22 address
        address_a = 6'b010001;
        address_b = 6'b010101;
        data_a = 32;
        data_b = 32;
        wren_a = 1'b0;
        wren_b = 1'b0;
        
        NS=5;
        end
   5: begin             //B32, B42 address
        address_a = 6'b011001;
        address_b = 6'b011101;
        data_a = 32;
        data_b = 32;
        wren_a = 1'b0;
        wren_b = 1'b0;
		
        NS=6;
        end
   6:	begin           //B13, B23 address
        address_a = 6'b010010;
        address_b = 6'b010110;
        data_a = 32;
        data_b = 32;
        wren_a = 1'b0;
        wren_b = 1'b0;
		
        NS=7;
        end
	7:	begin           //B33, B43 address
        address_a = 6'b011010;
        address_b = 6'b011110;
        data_a = 32;
        data_b = 32;
        wren_a = 1'b0;
        wren_b = 1'b0;
        
        NS=8;
        end
	8:	begin           //B14, B24
        address_a = 6'b010011;
        address_b = 6'b010111;
        data_a = 32;
        data_b = 32;
        wren_a = 1'b0;
        wren_b = 1'b0;
        
        NS=9;
        end
	9:	begin           //B34, B44
        address_a = 6'b011011;
        address_b = 6'b011111;
        data_a = 32;
        data_b = 32;
        wren_a = 1'b0;
        wren_b = 1'b0;
        
       // NS=10;
        end
    endcase
	end

endmodule
